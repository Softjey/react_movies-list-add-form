{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/isUrl.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","isUrl","str","test","TextField","name","value","label","placeholder","required","url","onChange","hasSomeError","id","useState","Math","random","toFixed","slice","errorMessage","setErrorMessage","htmlFor","type","classNames","event","inputValue","target","errorMessageText","NewMovie","onAdd","count","setCount","setHasSomeError","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","canSubmit","trim","onSubmit","preventDefault","prev","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2014938e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","function isUrl(str: string) {\n  // eslint-disable-next-line\n  const urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return urlPattern.test(str);\n}\n\nexport default isUrl;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport isUrl from '../../utils/isUrl';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  url?: boolean,\n  onChange?: (newValue: string) => void,\n  hasSomeError: (value: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  url = false,\n  onChange = () => { },\n  hasSomeError,\n}) => {\n  // generage a unique id once on component load\n  const { 0: id } = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  // const [touched, setTouched] = useState(false);\n\n  const { 0: errorMessage, 1: setErrorMessage } = useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value;\n    let errorMessageText = '';\n\n    if (required && !inputValue) {\n      hasSomeError(true);\n      errorMessageText = (`${label} is required`);\n    } else if (url && !isUrl(inputValue)) {\n      hasSomeError(true);\n      errorMessageText = ('This is not a url');\n    } else {\n      hasSomeError(false);\n    }\n\n    setErrorMessage(errorMessageText);\n    onChange(inputValue);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': errorMessage,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          // onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {errorMessage && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movie: Movie) => void,\n\n}\n\nexport const NewMovie: React.FC<Props> = ({\n  onAdd,\n}) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const { 0: count, 1: setCount } = useState(0);\n  const { 0: hasSomeError, 1: setHasSomeError } = useState(false);\n\n  const { 0: title, 1: setTitle } = useState('');\n  const { 0: description, 1: setDescription } = useState('');\n  const { 0: imgUrl, 1: setImgUrl } = useState('');\n  const { 0: imdbUrl, 1: setImdbUrl } = useState('');\n  const { 0: imdbId, 1: setImdbId } = useState('');\n\n  const canSubmit = title.trim() && imgUrl.trim()\n    && imdbUrl.trim() && imdbId.trim() && !hasSomeError;\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!canSubmit) {\n      return;\n    }\n\n    onAdd({\n      title: title.trim(),\n      description: description.trim(),\n      imgUrl: imgUrl.trim(),\n      imdbUrl: imdbUrl.trim(),\n      imdbId: imdbId.trim(),\n    });\n\n    resetForm();\n\n    setCount(prev => prev + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleFormSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n        hasSomeError={setHasSomeError}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n        hasSomeError={setHasSomeError}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        hasSomeError={setHasSomeError}\n        url\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        hasSomeError={setHasSomeError}\n        url\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        hasSomeError={setHasSomeError}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!canSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const { 0: movies, 1: setMovies } = useState(moviesFromServer);\n\n  const addMovieToList = (movie: Movie) => {\n    setMovies(prev => [...prev, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovieToList} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}